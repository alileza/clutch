// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: quicklinks/v1/quicklinks.proto

package quicklinksv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Link with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Link with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinkMultiError, or nil if none found.
func (m *Link) ValidateAll() error {
	return m.validate(true)
}

func (m *Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for ImagePath

	if len(errors) > 0 {
		return LinkMultiError(errors)
	}

	return nil
}

// LinkMultiError is an error wrapping multiple validation errors returned by
// Link.ValidateAll() if the designated constraints aren't met.
type LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMultiError) AllErrors() []error { return m }

// LinkValidationError is the validation error returned by Link.Validate if the
// designated constraints aren't met.
type LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkValidationError) ErrorName() string { return "LinkValidationError" }

// Error satisfies the builtin error interface
func (e LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkValidationError{}

// Validate checks the field values on LinkEntity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LinkEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LinkEntityMultiError, or
// nil if none found.
func (m *LinkEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkEntityValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkEntityValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkEntityValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LinkEntityMultiError(errors)
	}

	return nil
}

// LinkEntityMultiError is an error wrapping multiple validation errors
// returned by LinkEntity.ValidateAll() if the designated constraints aren't met.
type LinkEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkEntityMultiError) AllErrors() []error { return m }

// LinkEntityValidationError is the validation error returned by
// LinkEntity.Validate if the designated constraints aren't met.
type LinkEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkEntityValidationError) ErrorName() string { return "LinkEntityValidationError" }

// Error satisfies the builtin error interface
func (e LinkEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkEntityValidationError{}

// Validate checks the field values on SlackInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SlackInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SlackInfoMultiError, or nil
// if none found.
func (m *SlackInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamName

	// no validation rules for BotName

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return SlackInfoMultiError(errors)
	}

	return nil
}

// SlackInfoMultiError is an error wrapping multiple validation errors returned
// by SlackInfo.ValidateAll() if the designated constraints aren't met.
type SlackInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackInfoMultiError) AllErrors() []error { return m }

// SlackInfoValidationError is the validation error returned by
// SlackInfo.Validate if the designated constraints aren't met.
type SlackInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackInfoValidationError) ErrorName() string { return "SlackInfoValidationError" }

// Error satisfies the builtin error interface
func (e SlackInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackInfoValidationError{}

// Validate checks the field values on GetQuickLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuickLinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuickLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuickLinksRequestMultiError, or nil if none found.
func (m *GetQuickLinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuickLinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetProjectName()) < 1 {
		err := GetQuickLinksRequestValidationError{
			field:  "ProjectName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProjectEnvironment

	if all {
		switch v := interface{}(m.GetSlackInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuickLinksRequestValidationError{
					field:  "SlackInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuickLinksRequestValidationError{
					field:  "SlackInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlackInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuickLinksRequestValidationError{
				field:  "SlackInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetQuickLinksRequestMultiError(errors)
	}

	return nil
}

// GetQuickLinksRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuickLinksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuickLinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuickLinksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuickLinksRequestMultiError) AllErrors() []error { return m }

// GetQuickLinksRequestValidationError is the validation error returned by
// GetQuickLinksRequest.Validate if the designated constraints aren't met.
type GetQuickLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuickLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuickLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuickLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuickLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuickLinksRequestValidationError) ErrorName() string {
	return "GetQuickLinksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuickLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuickLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuickLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuickLinksRequestValidationError{}

// Validate checks the field values on GetQuickLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuickLinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuickLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuickLinksResponseMultiError, or nil if none found.
func (m *GetQuickLinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuickLinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLinkEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuickLinksResponseValidationError{
						field:  fmt.Sprintf("LinkEntities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuickLinksResponseValidationError{
						field:  fmt.Sprintf("LinkEntities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuickLinksResponseValidationError{
					field:  fmt.Sprintf("LinkEntities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuickLinksResponseMultiError(errors)
	}

	return nil
}

// GetQuickLinksResponseMultiError is an error wrapping multiple validation
// errors returned by GetQuickLinksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuickLinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuickLinksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuickLinksResponseMultiError) AllErrors() []error { return m }

// GetQuickLinksResponseValidationError is the validation error returned by
// GetQuickLinksResponse.Validate if the designated constraints aren't met.
type GetQuickLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuickLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuickLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuickLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuickLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuickLinksResponseValidationError) ErrorName() string {
	return "GetQuickLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuickLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuickLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuickLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuickLinksResponseValidationError{}
