// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: deploys/v1/deploys.proto

package deploysv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeploymentOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeploymentOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentOptionsMultiError, or nil if none found.
func (m *DeploymentOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmergencyRollout

	// no validation rules for SkipDeployChecks

	// no validation rules for InitiatingUser

	if len(errors) > 0 {
		return DeploymentOptionsMultiError(errors)
	}

	return nil
}

// DeploymentOptionsMultiError is an error wrapping multiple validation errors
// returned by DeploymentOptions.ValidateAll() if the designated constraints
// aren't met.
type DeploymentOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentOptionsMultiError) AllErrors() []error { return m }

// DeploymentOptionsValidationError is the validation error returned by
// DeploymentOptions.Validate if the designated constraints aren't met.
type DeploymentOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentOptionsValidationError) ErrorName() string {
	return "DeploymentOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentOptionsValidationError{}

// Validate checks the field values on Deploy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deploy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deploy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeployMultiError, or nil if none found.
func (m *Deploy) ValidateAll() error {
	return m.validate(true)
}

func (m *Deploy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetEnvironments()) < 1 {
		err := DeployValidationError{
			field:  "Environments",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetProjectName()) < 1 {
		err := DeployValidationError{
			field:  "ProjectName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMessage()) < 1 {
		err := DeployValidationError{
			field:  "Message",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Deploy_RevisionSha_Pattern.MatchString(m.GetRevisionSha()) {
		err := DeployValidationError{
			field:  "RevisionSha",
			reason: "value does not match regex pattern \"[0-9a-f]{40}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTarget()) < 1 {
		err := DeployValidationError{
			field:  "Target",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Options.(type) {

	case *Deploy_CustomOptions:

		if all {
			switch v := interface{}(m.GetCustomOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeployValidationError{
						field:  "CustomOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeployValidationError{
						field:  "CustomOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeployValidationError{
					field:  "CustomOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Deploy_DeployOptions:

		if all {
			switch v := interface{}(m.GetDeployOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeployValidationError{
						field:  "DeployOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeployValidationError{
						field:  "DeployOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeployOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeployValidationError{
					field:  "DeployOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeployMultiError(errors)
	}

	return nil
}

// DeployMultiError is an error wrapping multiple validation errors returned by
// Deploy.ValidateAll() if the designated constraints aren't met.
type DeployMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployMultiError) AllErrors() []error { return m }

// DeployValidationError is the validation error returned by Deploy.Validate if
// the designated constraints aren't met.
type DeployValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployValidationError) ErrorName() string { return "DeployValidationError" }

// Error satisfies the builtin error interface
func (e DeployValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployValidationError{}

var _Deploy_RevisionSha_Pattern = regexp.MustCompile("[0-9a-f]{40}")

// Validate checks the field values on TriggerManualDeployRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerManualDeployRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerManualDeployRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerManualDeployRequestMultiError, or nil if none found.
func (m *TriggerManualDeployRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerManualDeployRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployIntent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerManualDeployRequestValidationError{
					field:  "DeployIntent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerManualDeployRequestValidationError{
					field:  "DeployIntent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployIntent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerManualDeployRequestValidationError{
				field:  "DeployIntent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerManualDeployRequestMultiError(errors)
	}

	return nil
}

// TriggerManualDeployRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerManualDeployRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerManualDeployRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerManualDeployRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerManualDeployRequestMultiError) AllErrors() []error { return m }

// TriggerManualDeployRequestValidationError is the validation error returned
// by TriggerManualDeployRequest.Validate if the designated constraints aren't met.
type TriggerManualDeployRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerManualDeployRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerManualDeployRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerManualDeployRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerManualDeployRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerManualDeployRequestValidationError) ErrorName() string {
	return "TriggerManualDeployRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerManualDeployRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerManualDeployRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerManualDeployRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerManualDeployRequestValidationError{}

// Validate checks the field values on TriggerManualDeployResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerManualDeployResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerManualDeployResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerManualDeployResponseMultiError, or nil if none found.
func (m *TriggerManualDeployResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerManualDeployResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeployJobId

	if len(errors) > 0 {
		return TriggerManualDeployResponseMultiError(errors)
	}

	return nil
}

// TriggerManualDeployResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerManualDeployResponse.ValidateAll() if
// the designated constraints aren't met.
type TriggerManualDeployResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerManualDeployResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerManualDeployResponseMultiError) AllErrors() []error { return m }

// TriggerManualDeployResponseValidationError is the validation error returned
// by TriggerManualDeployResponse.Validate if the designated constraints
// aren't met.
type TriggerManualDeployResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerManualDeployResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerManualDeployResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerManualDeployResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerManualDeployResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerManualDeployResponseValidationError) ErrorName() string {
	return "TriggerManualDeployResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerManualDeployResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerManualDeployResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerManualDeployResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerManualDeployResponseValidationError{}
